
#comments-container
	a(name="comments")

	section#comments-list
		.comment-reply-container
			| {% if current_user.is_authenticated() %}

			| {% if comment_node_type.has_method('POST') %}
			.comment-reply-avatar
				img(src="{{ current_user.gravatar }}")

			.comment-reply-form

				.comment-reply-field
					textarea(
						id="comment_field",
						data-parent_id="{{ parent_id }}",
						placeholder="Join the conversation...",)

					.comment-reply-meta
						.comment-details
							.comment-rules
								a(
									title="Markdown Supported"
									href="https://guides.github.com/features/mastering-markdown/")
									i.pi-markdown

							.comment-author
								| commenting as
								span.author-name {{ current_user.full_name }}

						button.comment-action-cancel.btn.btn-outline(
							type="button",
							title="Cancel")
							i.pi-cancel
						button.comment-action-submit.btn.btn-outline(
							type="button",
							title="Post Comment")
							| Post Comment

					.comment-reply-preview

			| {% else %}

			| {# * It's autenticated, but has no 'POST' permission #}
			.comment-reply-form
				.comment-reply-field.sign-in
					textarea(
						disabled,
						id="comment_field",
						data-parent_id="{{ parent_id }}",
						placeholder="")
					.sign-in
						| Wanna be part of the conversation? <a href="https://store.blender.org/product/membership/">Get a Blender Cloud subscription</a>.
			| {% endif %}

			| {% else %}
			| {# * It's not autenticated #}
			.comment-reply-form
				.comment-reply-field.sign-in
					textarea(
						disabled,
						id="comment_field",
						data-parent_id="{{ parent_id }}",
						placeholder="")
					.sign-in
						a(href="{{ url_for('users.login') }}") Sign in
						| to comment.

			| {% endif %}

		section#comments-list-header
			#comments-list-items
				#comments-list-items-loading
					i.pi-spin

			script#comment-template(type="text/x-handlebars-template")
				| {% raw %}

				| {{#list items }}
				a(name="comment-{{ _id }}")
				.comment-container(
					data-node_id="{{ _id }}",
					class="{{#if is_team}}is-team{{/if}}{{#if is_reply}}is-reply{{else}}is-first{{/if}}")

					.comment-header
						.comment-avatar
							img(src="{{ gravatar }}")

						.comment-author
							| {{ author }}

						| {{#if is_team}}
						.comment-badge.badge-team team
						| {{/if}}

						.comment-time {{ time_published }}

					.comment-content {{{ content }}}

					.comment-meta
						.comment-rating(
							class="{{#if is_rated}}rated{{/if}}{{#if is_rated_positive}} positive{{/if}}")
							.comment-rating-value(title="Number of upvotes") {{ rating_up }}

							.comment-action-rating.up(title="Upvote comment")
							.comment-action-rating.down(title="Downvote comment")

						.comment-action-reply(title="Reply to this comment") reply

				| {{/list}}
				| {% endraw %}

			script#comments-empty-template(type="text/x-handlebars-template")
				.nocomments
					| No comments... yet!

					| {% if not current_user.is_authenticated() %}
					|  Â·
					a(href="{{ url_for('users.login') }}")  Sign in
					|  to comment.
					| {% endif %}


			| {# Build the list using individual comments
			//
				script#comments-list-template(type="text/x-handlebars-template")
					| {% raw %}

					| {{#list items }}
					| {{/list}}

					| {% endraw %}
			| #}



| {% block comment_scripts %}

script.
	// Markdown initialization
	var convert = new Markdown.getSanitizingConverter().makeHtml;

	// Define the template for handlebars
	var source = $("#comment-template").html();
	var template = Handlebars.compile(source);


	// Register the helper for generating the comments list
	Handlebars.registerHelper('list', function(context, options) {
		var ret = "";

		// Loop through all first-level comments
		for(var i=0, j=context.length; i<j; i++) {

			// Convert Markdown for each comment
			context[i]['content'] = convert(context[i]['content']);

			// Append compiled comment to return string
			ret = ret + options.fn(context[i]);

			// Search for replies to the current comment
			if (context[i]['replies']) {

				var replies = context[i]['replies'];
				var compiled_replies = "";

				// Loop through replies
				for(var r=0, t=replies.length; r<t; r++) {

					// Convert Markdown for each comment
					replies[r]['content'] = convert(replies[r]['content']);

					// Append compiled replies
					compiled_replies = compiled_replies + options.fn(replies[r]);

				}

				// Append replies list to the return string
				ret = ret + compiled_replies;

			}
		}

		return ret;
	});

	// Helper for the if/else statement
	Handlebars.registerHelper('if', function(conditional, options) {
		if(conditional) {
			return options.fn(this);
		} else {
			return options.inverse(this);
		}
	});


	/* Build the markdown preview when typing in textarea */
	$(function() {
		var $textarea = $('.comment-reply-field textarea'),
				$container = $('.comment-reply-form'),
				$preview = $('.comment-reply-preview');

		// As we type in the textarea
		$textarea.keyup(function() {

			// Convert markdown
			$preview.html(convert($textarea.val()));

			// While we are at it, style when empty
			if ($textarea.val()) {
				$container.addClass('filled');
			} else {
				$container.removeClass('filled');
			};

		}).trigger('keyup');
	});


	// Get the comments list in JSON
	$.getJSON( "{{url_for('nodes.comments_index')}}?parent_id={{ parent_id }}&format=json", function( data ) {
		// Format using handlebars template
		var comments = template(data);

		if (comments && comments.trim() !="") {
			$('#comments-list-items').html(comments);
		} else {
			$('#comments-list-items').html(Handlebars.compile($('#comments-empty-template').html()));
		}
	});


	/* Submit comment */
	$('.comment-action-submit').click(function(e){

		$this = $(this);

		var $textarea = $('.comment-reply-field textarea');

		// Check if there's actual content in the textarea
		if ($textarea.val()) {

			$this.addClass('submitting');
			$this.html('<i class="ion-load-c"></i> Posting...');

			// Collect parent_id
			var commentField = document.getElementById('comment_field');
			parent_id = commentField.getAttribute('data-parent_id');

			$.post("{{url_for('nodes.comments_create')}}",
				// Submit content and parent_id for comment creation
				{'content': $('#comment_field').val(), 'parent_id': parent_id}
			)
			.fail(function(){
				$this.addClass('button-field-error');
				$textarea.addClass('field-error')
				$this.html("Houston! Try again?");

				setTimeout(function(){
					$this.html('Post Comment');
					$this.removeClass('button-field-error');
					$textarea.removeClass('field-error');
				}, 2500);
			})
			.done(function(){
				// Load the comments
				var url = "{{url_for('nodes.comments_index')}}?parent_id={{ parent_id }}";
				$.get(url, function(dataHtml) {
					// Update the DOM injecting the generate HTML into the page
					$('#comments-container').replaceWith(dataHtml);
				})
			});

		} else {
			// No content in the textarea
			$this.addClass('button-field-error');
			$textarea.addClass('field-error')
			$this.html("Say something...");

			setTimeout(function(){
				$this.html('Post Comment');
				$this.removeClass('button-field-error');
				$textarea.removeClass('field-error');
			}, 2500);

		};
	});

| {% endblock %}
