| {% extends 'layout.html' %}

| {% block page_title %}{{project.name}}{% endblock%}

| {% block og %}
meta(property="og:title", content="{{project.name}} - Blender Cloud")
meta(property="og:url", content="{{url_for('projects.view', project_url=project.url, _external=True)}}")
meta(property="og:type", content="website")
meta(property="og:description", content="{{project.summary}}")
| {% if project.picture_header %}
meta(property="og:image", content="{{ project.picture_header.thumbnail('l', api=api) }}")
| {% endif %}
| {% endblock %}

| {% block tw %}
meta(name="twitter:title", content="{{project.name}} on Blender Cloud")
meta(name="twitter:description", content="{{project.summary}}")
| {% if project.picture_header %}
meta(name="twitter:image", content="{{ project.picture_header.thumbnail('l', api=api) }}")
| {% endif %}
| {% endblock %}

| {% block head %}
link(href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css", rel="stylesheet")
| {% endblock %}

| {% block header_backdrop %}
| {% if project.picture_header %}
.navbar-backdrop(style="background-image: url({{ project.picture_header.thumbnail('l', api=api) }})")
| {% endif %}
.navbar-backdrop-overlay
| {% endblock %}

| {% block body %}

#project_container

	#project-flex

		#project_nav
			#project-header.navigation
				ul.breadcrumb

					li.project-title
						a(href="{{url_for('projects.view', project_url=project.url, _external=True)}}") {{ project.name }}

				#project-loading
					i.pi-spin

			#project_tree


		#project_nav-footer
			.project_nav-collapse-btn(
				title="Collapse Navigation [T]",
				data-toggle="tooltip",
				data-placement="right")
				i.pi-angle-double-left

		.project_split(title="Toggle Navigation [T]")

		| {% if project.has_method('PUT') %}
		#project-header.context
			ul.breadcrumb.context
				li.project-title
					a(href="") {{ project.name }}

			span#project-statusbar

			ul.project-edit-tools
				li.button-add-group
					a#item_add_group.project-mode-view(
						href="#",
						title="Add new folder")
						i.button-add-group-icon.pi-collection-plus
						| Create Folder

				li.button-add
					a#item_add.project-mode-view(
						href="#",
						title="Add new asset")
						i.button-add-icon.pi-collection-plus
						| Add Asset

				li.button-edit
					a#item_edit.project-mode-view(
						href="#",
						title="Edit asset",
						data-project_id="{{project._id}}")
						i.button-edit-icon.pi-edit
						| Edit

				li.button-dropdown
					a.dropdown-toggle.project-mode-view(
						type="button",
						data-toggle="dropdown",
						aria-haspopup="true",
						aria-expanded="false")
						i.pi-more-vertical

					ul.dropdown-menu
						li.button-featured
							a#item_featured(
								href="#",
								title="Feature on project's homepage",
								data-toggle="tooltip",
								data-placement="left")
								i.button-featured-icon.pi-star
								| Toggle Featured

						li.button-toggle-public
							a#item_toggle_public(
								href="#",
								title="Toggle public",
								data-toggle="tooltip",
								data-placement="left")
								i.pi-lock-open
								| Toggle public

						li.button-move
							a#item_move(
								href="#",
								title="Move asset into a folder...",
								data-toggle="tooltip",
								data-placement="left")
								i.button-move-icon.pi-move
								| Move

						li.button-delete
							a#item_delete(
								href="#",
								title="Delete asset",
								data-toggle="tooltip",
								data-placement="left")
								i.pi-trash
								| Delete

				// Edit Mode
				li.button-cancel
					a#item_cancel.project-mode-edit(
						href="#",
						title="Cancel changes")
						i.button-cancel-icon.pi-cancel
						| Cancel

				li.button-save
					a#item_save.project-mode-edit(
						href="#",
						title="Save changes")
						i.button-save-icon.pi-check
						| Save Changes

		| {% endif %}

		#project_context-container
			.project_nav-expand-btn(
				title="Expand Navigation [T]",
				data-toggle="tooltip",
				data-placement="right")
				i.pi-angle-double-right


			#project_context
			#overlay-mode-move-container
				.overlay-container
					.title
						i.pi-angle-left
						| Select the <strong>folder</strong> where you want to move it
					.buttons
						button#item_move_accept.move.disabled
							| Select a Folder
						button#item_move_cancel.cancel
							i.pi-cancel
							| Cancel

| {% endblock %}

| {% block footer_navigation %}{% endblock %}
| {% block footer %}{% endblock %}

| {% block footer_scripts %}
script(src="//cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js")
script(src="//releases.flowplayer.org/6.0.3/flowplayer.min.js", async)

| {% if project.has_method('PUT') %}
| {# JS containing the Edit, Add, Featured, and Move functions #}
script(type="text/javascript", src="{{ url_for('static', filename='assets/js/project-edit.min.js') }}")
| {% endif %}

script.

	ProjectUtils.setProjectAttributes({projectId: "{{project._id}}", isProject: "", nodeId: ""});
	/* Initialize scrollbars */
	Ps.initialize(document.getElementById('project_context-container'), {suppressScrollX: true});
	Ps.initialize(document.getElementById('project_tree'), {suppressScrollX: true});

	var urlNodeMove = "{{url_for('projects.move_node')}}";
	var urlNodeFeature = "{{url_for('projects.add_featured_node')}}";
	var urlNodeDelete = "{{url_for('projects.delete_node')}}";
	var urlNodeTogglePublic = "{{url_for('projects.toggle_node_public')}}";

	function loadNodeContent(url, nodeId) {
		$('#project-loading').addClass('active');

		$.get(url, function(dataHtml) {
			$("#node-edit-form").unbind( "submit" );
			$("#item_save").unbind( "click" );
			$("#item_cancel").unbind( "click" );

			// Prevent flicker by scrolling to top before showing anything
			$("#project_context-container").scrollTop(0);

			// Update the DOM injecting the generate HTML into the page
			$('#project_context').html(dataHtml);

			// Update scrollbars
			Ps.update(document.getElementById('project_context-container'));

			// If a nodeId is specified, update the interface for editing and deletion
			if (typeof(nodeId) != 'undefined') {
				window.location.replace('#' + nodeId);
			};

			var nodeTitle = document.getElementById('node-title');
			var nodeTitleText = $(nodeTitle).text() + " - {{project.name}} - Blender Cloud";

			document.title = nodeTitleText;

			$('#project-loading').removeClass('active');
		})
		.fail(function(dataResponse) {
			$('#project_context').html($('<iframe id="server_error"/>'));
			$('#server_error').attr('src', url);

			$('#project-loading').removeClass('active');
		});
	}

	function loadProjectContent(url) {
		$('#project-loading').addClass('active');

		$.get(url, function(dataHtml) {

			$("#node-edit-form").unbind( "submit" );
			$("#item_save").unbind( "click" );
			$("#item_cancel").unbind( "click" );

			// Prevent flicker by scrolling to top before showing anything
			$("#project_context-container").scrollTop(0);

			// Update the DOM injecting the generated HTML into the page
			$('#project_context').html(dataHtml);

			// Update scrollbars
			Ps.update(document.getElementById('project_context-container'));

			$('#project-loading').removeClass('active');
		})
		.fail(function(dataResponse) {
			$('#project_context').html($('<iframe id="server_error"/>'));
			$('#server_error').attr('src', url);

			$('#project-loading').removeClass('active');
		});
	}


	function displayStorage(storageNodeId, path) {
		var url = '/nodes/' + storageNodeId + '/view?embed=1&path=' + path;
		loadNodeContent(url);
	}


	function displayNode(nodeId) {
		// Remove the 'n_' suffix from the id
		if (nodeId.substring(0, 2) == 'n_') {
			nodeId = nodeId.substr(2);
		}
		var url = '/nodes/' + nodeId + '/view?embed=1'
		loadNodeContent(url, nodeId);
		$('.project-mode-view').show();
		$('.project-mode-edit').hide();

		$("#project_context-container").scrollTop(0);
	}


	function displayProject(projectUrl) {
		var url = "{{url_for('projects.view', project_url=project.url, embed=1)}}"
		loadProjectContent(url, projectUrl);
		$('.project-mode-view').show();
		$('.project-mode-edit').hide();
	}

	/* Loaded once, on page load */
	function loadContent() {

		// If the loaded URL has an asset id hashed, arrange the view accordingly
		var nodeId = undefined;
		{% if embedded_node_id %}
			nodeId = '{{embedded_node_id}}';
			window.history.pushState({},'', '{{rewrite_url}}');
			displayNode(nodeId);
		{% else %}
			if (location.hash) {
				nodeId = location.hash.substring(1);
				displayNode(nodeId);
			} else {
				nodeId = '{{project._id}}';
				displayProject(nodeId);
			}
		{% endif %}


		Ps.initialize(document.getElementById('project_context-container'));

		$('#project_tree').jstree({
				'core': {
						'data': function (obj, callback) {
								if(obj.id === '#') { //tree root
										$.getJSON("{{url_for('projects.view', project_url=project.url, format='jstree')}}", function(jsonObject) {
												callback.call(this, jsonObject['items']);
										});

								} else { //normal node
										if (obj.original.type == 'group_storage') {
											nodeId = obj.original.storage_node;
											$.getJSON('/nodes/' + nodeId + '/view?format=jstree&children=1&path=' + obj.original.path, function(jsonObject) {
												callback.call(this, jsonObject.children);
											});
										} else {
											// Remove the 'n_' suffix from the id
											nodeId = obj.id.substring(2);
											$.getJSON('/nodes/' + nodeId + '/view?format=jstree&children=1', function(jsonObject) {
													callback.call(this, jsonObject.children);
											});
										}
								}
						}
				},
				"types" : {
						"#": {"valid_children": ["collection"]},
						"chapter" : {"icon": "pi-folder"},
						"group" : {"icon": "pi-folder"},
						"group_storage" : {"icon": "pi-folder"},
						"filesystem_node" : {"icon": "pi-folder"},
						"file" : {"icon": "pi-document", "max_children": 0},
						"filesystem_file" : {"icon": "pi-document", "max_children": 0},
						"image" : {"icon": "pi-image", "max_children": 0},
						"texture" : {"icon": "pi-image", "max_children": 0},
						"video" : {"icon": "pi-film-thick", "max_children": 0},
						"blog" : {"icon": "pi-chatbubble-working", "max_children": 0},
						"default" : {"icon": "pi-folder"}
				},
				"plugins": ["types",] //, "state", "sort"
		});


		var jstreeAPI = $('#project_tree').jstree(true);

		$('#project_tree').on("select_node.jstree", function (e, data) {

			if (typeof(data.node.original.path) === 'undefined') {
				var moving_node_id = Cookies.get('bcloud_moving_node_id');
				var node_id = document.getElementById("item_add");

				// Check if we are in the process of moving a node
				if (moving_node_id) {
					// Allow moving nodes only inside of node_type group
					if (data.node.original.type != 'group' || moving_node_id === data.node.original.id.substr(2) || moving_node_id === node_id.getAttribute('data-parent_node_id')) {
						$('#item_move_accept').addClass('disabled');
						$('#item_move_accept').html('Select a Folder');
					} else {
						$('#item_move_accept').removeClass('disabled');
						$('#item_move_accept').html('<i class="pi-check"></i>Move Here');
					}
				}

				// Check they type of node and act accordingly
				if (data.node.original.type == 'blog') {
					window.location.replace('blog');
				} else {
					var currentNodeId = ProjectUtils.nodeId();
					if (currentNodeId != data.node.id.substr(2)) {
						displayNode(data.node.id);
					}

					// Only toggle if the group is closed
					if (jstreeAPI.is_closed(data.node)){
						jstreeAPI.toggle_node(data.node);
					};

				}
			} else {
				displayStorage(data.node.original.storage_node, data.node.original.path);
				jstreeAPI.toggle_node(data.node);
			}

			// Temp fix to only let user add groups when viewing a group
			if (data.node.original.type === 'group') {
				$('.button-add').removeClass('disabled');
			} else {
				$('.button-add').addClass('disabled');
			};

			/* Update scrollbar */
			Ps.update(document.getElementById('project_tree'));
		});

		$('#project_tree').on("open_node.jstree", function () {
			/* Update scrollbar */
			Ps.update(document.getElementById('project_tree'));
		});
		$('#project_tree').on("close_node.jstree", function () {
			/* Update scrollbar */
			Ps.update(document.getElementById('project_tree'));
		});

	};

	// Initialize the page
	loadContent();

	/* UI Stuff */
	container_offset = $('#project-flex').offset();

	function containerResizeY(window_height){

		var container_height = window_height - container_offset.top;
		var container_height_wheader = window_height - container_offset.top - $('#project-header').height();

		if (container_height > parseInt($('#project-flex').css("min-height"))) {
			$('#project-flex').css(
				{'max-height': container_height + 'px',
				 'height': container_height + 'px'}
			);
			$('#project_tree').css(
				{'max-height': container_height_wheader + 'px',
				 'height': container_height_wheader + 'px'}
			);
			if ($('#project_context-container').prev('#project-header').length) {
				$('#project_context-container').css(
					{'max-height': container_height_wheader + 'px',
					 'height': container_height_wheader + 'px'}
				);
			} else {
				$('#project_context-container').css(
					{'max-height': container_height + 'px',
					 'height': container_height + 'px'}
				);
			}
		};

		Ps.update(document.getElementById('project_context-container'));
		Ps.update(document.getElementById('project_tree'));
	};

	$(window).on("load resize",function(){
		containerResizeY($(window).height());
	});

	$(document).on( 'scroll', '#project_context-container', function(){
		Ps.update(document.getElementById('project_context-container'));
	});

	$("#project_tree").hover(function(){
		Ps.update(document.getElementById('project_tree'));
	});

| {% endblock %}

| {% block comment_scripts %} {% endblock%}
